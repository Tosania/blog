---
import type { Page } from "astro";
import { Icon } from "astro-icon/components";
import { url } from "../../utils/url-utils";

interface Props {
	page: Page;
	class?: string;
	style?: string;
	/** 列表页的基路径（如 "/poems"）；不传则自动从当前 URL 推断 */
	base?: string;
}

const { page, style, base } = Astro.props;
const className = Astro.props.class;

// ====== 基础常量 ======
const HIDDEN = -1;
const ADJ_DIST = 2; // 当前页两侧显示的相邻数量
const VISIBLE = ADJ_DIST * 2 + 1; // 可见页码总数（不含省略号）

// ====== 基路径推断 & URL 生成 ======
// 从 page.url.current 推断基路径：去掉末尾斜杠与 "/数字"
const inferBase = (current: string | undefined) => {
	const cur = (current || "/").replace(/\/$/, "");
	const b = cur.replace(/\/\d+$/, "");
	return b || "/"; // 避免空串
};

// 归一化 base，优先使用 props.base
const basePath = (base ?? inferBase(page?.url?.current)).replace(/\/$/, "");

// 统一生成分页链接（第 1 页 /base/，其他 /base/2/…）
const getPageUrl = (p: number) =>
	p === 1 ? `${basePath}/` : `${basePath}/${p}/`;

// ====== 可见页码区间计算（沿用你的逻辑） ======
let count = 1;
let l = page.currentPage;
let r = page.currentPage;

while (0 < l - 1 && r + 1 <= page.lastPage && count + 2 <= VISIBLE) {
	count += 2;
	l--;
	r++;
}
while (0 < l - 1 && count < VISIBLE) {
	count++;
	l--;
}
while (r + 1 <= page.lastPage && count < VISIBLE) {
	count++;
	r++;
}

let pages: number[] = [];
if (l > 1) pages.push(1);
if (l === 3) pages.push(2);
if (l > 3) pages.push(HIDDEN);
for (let i = l; i <= r; i++) pages.push(i);
if (r < page.lastPage - 2) pages.push(HIDDEN);
if (r === page.lastPage - 2) pages.push(page.lastPage - 1);
if (r < page.lastPage) pages.push(page.lastPage);
---

<div class:list={[className, "flex flex-row gap-3 justify-center"]} style={style}>
  <!-- 上一页 -->
  <a
    href={page.url.prev || ""}
    aria-label={page.url.prev ? "Previous Page" : null}
    class:list={[
      "btn-card overflow-hidden rounded-lg text-[var(--primary)] w-11 h-11",
      { "disabled": page.url.prev == undefined }
    ]}
  >
    <Icon name="material-symbols:chevron-left-rounded" class="text-[1.75rem]" />
  </a>

  <!-- 数字页码 -->
  <div class="bg-[var(--card-bg)] flex flex-row rounded-lg items-center text-neutral-700 dark:text-neutral-300 font-bold">
    {pages.map((p) => {
      if (p === HIDDEN) {
        return <Icon name="material-symbols:more-horiz" class="mx-1" />;
      }
      if (p === page.currentPage) {
        return (
          <div class="h-11 w-11 rounded-lg bg-[var(--primary)] flex items-center justify-center font-bold text-white dark:text-black/70">
            {p}
          </div>
        );
      }
      return (
        <a
          href={url(getPageUrl(p))}            /* ✅ 绝对路径 + 正确 base */
          aria-label={`Page ${p}`}
          class="btn-card w-11 h-11 rounded-lg overflow-hidden active:scale-[0.85]"
        >
          {p}
        </a>
      );
    })}
  </div>

  <!-- 下一页 -->
  <a
    href={page.url.next || ""}
    aria-label={page.url.next ? "Next Page" : null}
    class:list={[
      "btn-card overflow-hidden rounded-lg text-[var(--primary)] w-11 h-11",
      { "disabled": page.url.next == undefined }
    ]}
  >
    <Icon name="material-symbols:chevron-right-rounded" class="text-[1.75rem]" />
  </a>
</div>
