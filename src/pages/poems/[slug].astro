---
import { getCollection } from "astro:content";
import path from "node:path";
import Giscus from "@/components/Giscus.astro";
import ImageWrapper from "@/components/misc/ImageWrapper.astro";
import License from "@/components/misc/License.astro";
import Markdown from "@/components/misc/Markdown.astro";
// import PostMetadata from "@/components/PostMeta.astro"; // 已移除
import { giscus, licenseConfig, profileConfig, siteConfig } from "@/config";
import MainGridLayout from "@/layouts/MainGridLayout.astro";
import { formatDateToYYYYMMDD } from "@/utils/date-utils";

export async function getStaticPaths() {
	const poems = await getCollection("poems");
	return poems.map((entry) => ({
		params: { slug: entry.slug },
		props: { entry },
	}));
}

const { entry } = Astro.props;
const { Content, headings } = await entry.render();
const jsonLd = {
	"@context": "https://schema.org",
	"@type": "CreativeWork",
	headline: entry.data.title,
	description: entry.data.description || entry.data.title,
	author: { "@type": "Person", name: entry.data.author },
	// 这里仍然保留结构化数据的 datePublished（用于 SEO），与页面展示的“创作时间（字符串）”互不冲突
	datePublished: formatDateToYYYYMMDD(entry.data.published),
	inLanguage: (entry.data.lang ?? siteConfig.lang).replace("_", "-"),
};

// 读取“创作时间”的字符串字段；优先使用 creationText，其次兼容其它命名
const creationText =
	entry.data.creationText ??
	entry.data.creation ??
	entry.data.yearText ??
	entry.data.year ??
	undefined;
---

<MainGridLayout banner={entry.data.image} title={entry.data.title} description={entry.data.description} lang={entry.data.lang} setOGTypeArticle={true} headings={headings}>
  <script is:inline slot="head" type="application/ld+json" set:html={JSON.stringify(jsonLd)}></script>
  
  <div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative mb-4">
    <div id="poem-container" class="card-base z-10 px-6 md:px-9 pt-6 pb-4 relative w-full">
      <div class="relative onload-animation">
        <div class="transition w-full block font-bold mb-3 text-3xl md:text-[2.25rem]/[2.75rem]
                    text-black/90 dark:text-white/90
                    md:before:w-1 before:h-5 before:rounded-md before:bg-[var(--primary)]
                    before:absolute before:top-[0.75rem] before:left-[-1.125rem]">
          {entry.data.title}
        </div>
      </div>

      <!-- 作者 / 创作时间（字符串）/ 朝代 三枚胶囊 -->
      <div class="onload-animation">
        <div class="mb-5 flex flex-wrap gap-2">
          {entry.data.author && (
            <span class="inline-flex items-center gap-1 rounded-md border border-[var(--line-divider)] px-2 py-1 text-xs md:text-sm opacity-80">
              作者：{entry.data.author}
            </span>
          )}
          {creationText && (
            <span class="inline-flex items-center gap-1 rounded-md border border-[var(--line-divider)] px-2 py-1 text-xs md:text-sm opacity-80">
              创作时间：{creationText}
            </span>
          )}
          {entry.data.dynasty && (
            <span class="inline-flex items-center gap-1 rounded-md border border-[var(--line-divider)] px-2 py-1 text-xs md:text-sm opacity-80">
              朝代：{entry.data.dynasty}
            </span>
          )}
        </div>
        {!entry.data.image && <div class="border-[var(--line-divider)] border-dashed border-b-[1px] mb-5"></div>}
      </div>

      {entry.data.image && (
        <ImageWrapper
          id="poem-cover"
          src={entry.data.image}
          basePath={path.join("content/poems/", entry.id.split('/').slice(2,-1).join('/'))}
          class="mb-8 rounded-xl banner-container onload-animation"
        />
      )}

      <Markdown class="mb-6 markdown-content onload-animation font-kai !text-[1.4rem] md:@!text-[1.4rem]">
        <Content />
      </Markdown>

      {entry.data.comments !== false && (
        <div class="onload-animation mt-8">
          <div class="border-[var(--line-divider)] border-dashed border-b-[1px] mb-5"></div>
          <Giscus {...giscus} />
        </div>
      )}
    </div>
  </div>
</MainGridLayout>
