---
import { getCollection } from "astro:content";
import path from "node:path";
import Giscus from "@/components/Giscus.astro";
import ImageWrapper from "@/components/misc/ImageWrapper.astro";
import License from "@/components/misc/License.astro";
import Markdown from "@/components/misc/Markdown.astro";
import PostMetadata from "@/components/PostMeta.astro";
import { giscus, licenseConfig, profileConfig, siteConfig } from "@/config";
import MainGridLayout from "@/layouts/MainGridLayout.astro";
import { formatDateToYYYYMMDD } from "@/utils/date-utils";

export async function getStaticPaths() {
	const poems = await getCollection("poems");
	return poems.map((entry) => ({
		params: { slug: entry.slug },
		props: { entry },
	}));
}

const { entry } = Astro.props;
const { Content, headings } = await entry.render();
const jsonLd = {
	"@context": "https://schema.org",
	"@type": "CreativeWork",
	headline: entry.data.title,
	description: entry.data.description || entry.data.title,
	author: { "@type": "Person", name: entry.data.author },
	datePublished: formatDateToYYYYMMDD(entry.data.published),
	inLanguage: (entry.data.lang ?? siteConfig.lang).replace("_", "-"),
};
---

<MainGridLayout banner={entry.data.image} title={entry.data.title} description={entry.data.description} lang={entry.data.lang} setOGTypeArticle={true} headings={headings}>
  <script is:inline slot="head" type="application/ld+json" set:html={JSON.stringify(jsonLd)}></script>
  
  <div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative mb-4">
    <div id="poem-container" class="card-base z-10 px-6 md:px-9 pt-6 pb-4 relative w-full">
      <div class="relative onload-animation">
        <div class="transition w-full block font-bold mb-3 text-3xl md:text-[2.25rem]/[2.75rem]
                    text-black/90 dark:text-white/90
                    md:before:w-1 before:h-5 before:rounded-md before:bg-[var(--primary)]
                    before:absolute before:top-[0.75rem] before:left-[-1.125rem]">
          {entry.data.title}
        </div>
      </div>
      <div class="opacity-70 mt-1">
  {entry.data.author}{entry.data.dynasty ? ` · ${entry.data.dynasty}` : ''}{entry.data.lang ? ` · ${entry.data.lang}` : ''}
</div>
      <div class="onload-animation">
        <PostMetadata
          class="mb-5"
          published={entry.data.published}
          updated={entry.data.updated}
          tags={entry.data.tags}
          category={entry.data.category}
        />
        {!entry.data.image && <div class="border-[var(--line-divider)] border-dashed border-b-[1px] mb-5"></div>}
      </div>

      {entry.data.image && (
        <ImageWrapper id="poem-cover" src={entry.data.image} basePath={path.join("content/poems/", entry.id.split('/').slice(2,-1).join('/'))} class="mb-8 rounded-xl banner-container onload-animation" />
      )}

      <Markdown class="mb-6 markdown-content onload-animation">
        <Content />
      </Markdown>

      
      {entry.data.comments !== false && (
        <div class="onload-animation mt-8">
          <div class="border-[var(--line-divider)] border-dashed border-b-[1px] mb-5"></div>
          <Giscus {...giscus} />
        </div>
      )}
    </div>
  </div>
</MainGridLayout>
